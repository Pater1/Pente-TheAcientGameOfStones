<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>Model Class</title>
    <link rel="stylesheet" type="text/css" href="../styles/presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="../scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="../scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="../scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="../scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="../scripts/CommonUtilities.js"> </script>
    <meta name="container" content="Microsoft.Test.VariationGeneration" />
    <meta name="file" content="T_Microsoft_Test_VariationGeneration_Model" />
    <meta name="guid" content="T_Microsoft_Test_VariationGeneration_Model" />
    <xml>
      <MSHelp:Attr Name="AssetID" Value="T:Microsoft.Test.VariationGeneration.Model" />
      <MSHelp:TOCTitle Title="Model Class" />
      <MSHelp:RLTitle Title="Model Class (Microsoft.Test.VariationGeneration)" />
      <MSHelp:Keyword Index="A" Term="T:Microsoft.Test.VariationGeneration.Model" />
      <MSHelp:Keyword Index="A" Term="frlrfMicrosoftTestVariationGenerationModelClassTopic" />
      <MSHelp:Keyword Index="K" Term="Model class" />
      <MSHelp:Keyword Index="K" Term="Microsoft.Test.VariationGeneration.Model class" />
      <MSHelp:Keyword Index="K" Term="Model class, about Model class" />
      <MSHelp:Keyword Index="F" Term="Model" />
      <MSHelp:Keyword Index="F" Term="Microsoft.Test.VariationGeneration.Model" />
      <MSHelp:Attr Name="HelpPriority" Value="2" />
      <MSHelp:Attr Name="APIType" Value="Managed" />
      <MSHelp:Attr Name="APILocation" Value="TestApiCore.dll" />
      <MSHelp:Attr Name="APIName" Value="Microsoft.Test.VariationGeneration.Model" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLang" Value="VB" />
      <MSHelp:Attr Name="DevLang" Value="C++" />
      <MSHelp:Attr Name="Locale" Value="en-us" />
      <MSHelp:Attr Name="TopicType" Value="kbSyntax" />
      <MSHelp:Attr Name="TopicType" Value="apiref" />
      <MSHelp:Attr Name="Abstract" Value="Provides a general-purpose model that generates a . See also ." />
      <MSHelp:Attr Name="AssemblyVersion" Value="0.0.0.0" />
      <MSHelp:Attr Name="NoName" Value="" />
    </xml>
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"></script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" title="Collapse image" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" title="Expand Image" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" title="Copy image" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" title="CopyHover image" />
    <div id="header">
      <table id="topTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span>
            <span>    </span>
            <span id="devlangsDropdown" class="filter" tabindex="0">
              <img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual C++ </nobr></label></span>
          </td>
        </tr>
      </table>
      <div id="devlangsMenu">
        <input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="CSharpCheckbox">C#</label>
        <br />
        <input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label>
        <br />
        <input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label>
        <br />
      </div>
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">.</span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">Model Class</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left">
            <a href="AllMembers_T_Microsoft_Test_VariationGeneration_Model.htm">Members</a>  <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a>  <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a>  
  <span id="headfeedbackarea" class="feedbackhead">
      <a href="javascript:SubmitFeedback('testapi@microsoft.com','.','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">
        
        Send Feedback
      </a>
	</span>
</td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <span style="color: DarkGray"> </span>
        <div class="summary">
             Provides a general-purpose model that generates a <a href="T_Microsoft_Test_VariationGeneration_Variation.htm">Variation</a>. 
             See also <a href="T_Microsoft_Test_VariationGeneration_Model_1.htm">Model<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></a>.
             </div>
        <p />
    <b>Namespace:</b> 
   <a href="N_Microsoft_Test_VariationGeneration.htm">Microsoft.Test.VariationGeneration</a><br />
    <b>Assembly:</b>
   <span sdata="assembly">TestApiCore</span> (in TestApiCore.dll) Version: 0.0.0.0<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">Model</span> : <a href="T_Microsoft_Test_VariationGeneration_Model_1.htm">Model</a>&lt;<a href="T_Microsoft_Test_VariationGeneration_Variation.htm">Variation</a>&gt;</pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic (Declaration)</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">Model</span> _
	<span class="keyword">Inherits</span> <a href="T_Microsoft_Test_VariationGeneration_Model_1.htm">Model</a>(<span class="keyword">Of</span> <a href="T_Microsoft_Test_VariationGeneration_Variation.htm">Variation</a>)</pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">Model</span> : <span class="keyword">public</span> <a href="T_Microsoft_Test_VariationGeneration_Model_1.htm">Model</a>&lt;<a href="T_Microsoft_Test_VariationGeneration_Variation.htm">Variation</a>^&gt;</pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle, event)" tabindex="0"><img id="remarksToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="">
             Exhaustively testing all possible inputs to any nontrivial software component is generally not possible
             because of the enormous number of variations. Combinatorial testing is one approach to achieve high coverage
             with a much smaller set of variations. Pairwise, the most common combinatorial strategy, tests every possible 
             pair of values. Higher orders of combinations (three-wise, four-wise, and so on) can also be used for higher coverage
             at the expense of more variations. See <a href="http://pairwise.org">Pairwise Testing</a> and 
             <a href="http://www.pairwise.org/docs/pnsqc2006/PNSQC%20140%20-%20Jacek%20Czerwonka%20-%20Pairwise%20Testing%20-%20BW.pdf">
             Pairwise Testing in Real World</a> for more resources.
             </div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style="">
             The following example shows how to create a set of test-run configurations by using 
             a model that only uses variables.
             <span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img src="../icons/CopyCode.gif" style="margin-right: 5px;" />Copy</span>C#</div><div class="code"><pre><span class="highlight-comment">// Specify the parameters and parameter values</span>
var os = <span class="highlight-keyword">new</span> Parameter&lt;<span class="highlight-keyword">string</span>&gt;(<span class="highlight-literal">"OS"</span>) { <span class="highlight-literal">"WinXP"</span>, <span class="highlight-literal">"Win2k3"</span>, <span class="highlight-literal">"Vista"</span>, <span class="highlight-literal">"Win7"</span> };
var memory = <span class="highlight-keyword">new</span> Parameter&lt;<span class="highlight-keyword">int</span>&gt;(<span class="highlight-literal">"Memory"</span>) { <span class="highlight-number">512</span>, <span class="highlight-number">1024</span>, <span class="highlight-number">2048</span>, <span class="highlight-number">4096</span> };
var graphics = <span class="highlight-keyword">new</span> Parameter&lt;<span class="highlight-keyword">string</span>&gt;(<span class="highlight-literal">"Graphics"</span>) { <span class="highlight-literal">"Nvidia"</span>, <span class="highlight-literal">"ATI"</span>, <span class="highlight-literal">"Intel"</span> };
var lang = <span class="highlight-keyword">new</span> Parameter&lt;<span class="highlight-keyword">string</span>&gt;(<span class="highlight-literal">"Lang"</span>) { <span class="highlight-literal">"enu"</span>, <span class="highlight-literal">"jpn"</span>, <span class="highlight-literal">"deu"</span>, <span class="highlight-literal">"chs"</span>, <span class="highlight-literal">"ptb"</span> };

var parameters = <span class="highlight-keyword">new</span> List&lt;ParameterBase&gt; { os, memory, graphics, lang };

var model = <span class="highlight-keyword">new</span> Model(parameters);

<span class="highlight-comment">// The model is complete; now generate the configurations and print out</span>
<span class="highlight-keyword">foreach</span> (var config <span class="highlight-keyword">in</span> model.GenerateVariations(<span class="highlight-number">2</span>))
{
    Console.WriteLine(<span class="highlight-literal">"{0} {1} {2} {3}"</span>,
        config[<span class="highlight-literal">"OS"</span>],
        config[<span class="highlight-literal">"Memory"</span>],
        config[<span class="highlight-literal">"Graphics"</span>],
        config[<span class="highlight-literal">"Lang"</span>]);
}</pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style="">
             The following example shows how to create variations for a vacation planner that has a signature like this:
             CallVacationPlanner(string destination, int hotelQuality, string activity). This example demonstrates that certain
             activities are only available for certain destinations.
             <span id="cbc_2" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img src="../icons/CopyCode.gif" style="margin-right: 5px;" />Copy</span>C#</div><div class="code"><pre>var de = <span class="highlight-keyword">new</span> Parameter&lt;<span class="highlight-keyword">string</span>&gt;(<span class="highlight-literal">"Destination"</span>) { <span class="highlight-literal">"Whistler"</span>, <span class="highlight-literal">"Hawaii"</span>, <span class="highlight-literal">"Las Vegas"</span> };
var ho = <span class="highlight-keyword">new</span> Parameter&lt;<span class="highlight-keyword">int</span>&gt;(<span class="highlight-literal">"Hotel Quality"</span>) { <span class="highlight-number">5</span>, <span class="highlight-number">4</span>, <span class="highlight-number">3</span>, <span class="highlight-number">2</span>, <span class="highlight-number">1</span> };
var ac = <span class="highlight-keyword">new</span> Parameter&lt;<span class="highlight-keyword">string</span>&gt;(<span class="highlight-literal">"Activity"</span>) { <span class="highlight-literal">"gambling"</span>, <span class="highlight-literal">"swimming"</span>, <span class="highlight-literal">"shopping"</span>, <span class="highlight-literal">"skiing"</span> };

var parameters = <span class="highlight-keyword">new</span> List&lt;ParameterBase&gt; { de, ho, ac };
var constraints = <span class="highlight-keyword">new</span> List&lt;Constraint&lt;Variation&gt;&gt;
{
    <span class="highlight-comment">// If going to Whistler or Hawaii, then no gambling</span>
    Constraint&lt;Variation&gt;
        .If(v =&gt; de.GetValue(v) == <span class="highlight-literal">"Whistler"</span> || de.GetValue(v) == <span class="highlight-literal">"Hawaii"</span>)
        .Then(v =&gt; ac.GetValue(v) != <span class="highlight-literal">"gambling"</span>),

    <span class="highlight-comment">// If going to Las Vegas or Hawaii, then no skiing</span>
    Constraint&lt;Variation&gt;
        .If(v =&gt; de.GetValue(v) == <span class="highlight-literal">"Las Vegas"</span> || de.GetValue(v) == <span class="highlight-literal">"Hawaii"</span>)
        .Then(v =&gt; ac.GetValue(v) != <span class="highlight-literal">"skiing"</span>),

    <span class="highlight-comment">// If going to Whistler, then no swimming</span>
    Constraint&lt;Variation&gt;
        .If(v =&gt; de.GetValue(v) == <span class="highlight-literal">"Whistler"</span>)
        .Then(v =&gt; ac.GetValue(v) != <span class="highlight-literal">"swimming"</span>),
};
var model = <span class="highlight-keyword">new</span> Model(parameters, constraints);


<span class="highlight-keyword">foreach</span> (var vacationOption <span class="highlight-keyword">in</span> model.GenerateVariations(<span class="highlight-number">2</span>))
{
    Console.WriteLine(<span class="highlight-literal">"{0}, {1} stars -- {2}"</span>,
        vacationOption[<span class="highlight-literal">"Destination"</span>],
        vacationOption[<span class="highlight-literal">"Hotel Quality"</span>],
        vacationOption[<span class="highlight-literal">"Activity"</span>]);
}</pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style="">
             The following example shows how to create variations for a vacation planner that adds weights and tags
             to certain values.  Adding weights changes the frequency in which a value will occur. Adding tags allows expected values
             to be added to variations.
             <span id="cbc_3" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img src="../icons/CopyCode.gif" style="margin-right: 5px;" />Copy</span>C#</div><div class="code"><pre>var de = <span class="highlight-keyword">new</span> Parameter&lt;<span class="highlight-keyword">string</span>&gt;(<span class="highlight-literal">"Destination"</span>) 
{ 
    <span class="highlight-literal">"Whistler"</span>, 
    <span class="highlight-literal">"Hawaii"</span>,
    <span class="highlight-keyword">new</span> ParameterValue&lt;<span class="highlight-keyword">string</span>&gt;(<span class="highlight-literal">"Las Vegas"</span>) { Weight = <span class="highlight-number">10.0</span> },
    <span class="highlight-keyword">new</span> ParameterValue&lt;<span class="highlight-keyword">string</span>&gt;(<span class="highlight-literal">"Cleveland"</span>) { Tag = <span class="highlight-keyword">false</span> }
};
var ho = <span class="highlight-keyword">new</span> Parameter&lt;<span class="highlight-keyword">int</span>&gt;(<span class="highlight-literal">"Hotel Quality"</span>) { <span class="highlight-number">5</span>, <span class="highlight-number">4</span>, <span class="highlight-number">3</span>, <span class="highlight-number">2</span>, <span class="highlight-number">1</span> };
var ac = <span class="highlight-keyword">new</span> Parameter&lt;<span class="highlight-keyword">string</span>&gt;(<span class="highlight-literal">"Activity"</span>) { <span class="highlight-literal">"gambling"</span>, <span class="highlight-literal">"swimming"</span>, <span class="highlight-literal">"shopping"</span>, <span class="highlight-literal">"skiing"</span> };
var parameters = <span class="highlight-keyword">new</span> List&lt;ParameterBase&gt; { de, ho, ac };

var model = <span class="highlight-keyword">new</span> Model(parameters) { DefaultVariationTag = <span class="highlight-keyword">true</span> };

<span class="highlight-keyword">foreach</span> (var v <span class="highlight-keyword">in</span> model.GenerateVariations(<span class="highlight-number">1</span>))
{
    Console.WriteLine(<span class="highlight-literal">"{0} {1} {2} {3}"</span>,
        v[<span class="highlight-literal">"Destination"</span>],
        v[<span class="highlight-literal">"Hotel Quality"</span>],
        v[<span class="highlight-literal">"Activity"</span>],
        ((<span class="highlight-keyword">bool</span>)v.Tag == <span class="highlight-keyword">false</span>) ? <span class="highlight-literal">"--&gt; don't go!"</span> : <span class="highlight-literal">""</span>);
}</pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Object</a><br />  <a href="T_Microsoft_Test_VariationGeneration_Model_1.htm">Microsoft.Test.VariationGeneration<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Model</a><span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span><a href="T_Microsoft_Test_VariationGeneration_Variation.htm">Variation</a><span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span><br />    <span class="selflink">Microsoft.Test.VariationGeneration<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Model</span><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="AllMembers_T_Microsoft_Test_VariationGeneration_Model.htm">Model Members</a></div><div class="seeAlsoStyle"><a href="N_Microsoft_Test_VariationGeneration.htm">Microsoft.Test.VariationGeneration Namespace</a></div></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" title="Footer image" />
        </div>
        <A NAME="feedback"></A>
        <span id="fb" class="feedbackcss" style="display: none;"> </span>
<p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:testapi%40microsoft.com?Subject=.">testapi@microsoft.com</a>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div>
    </div>
  </body>
</html>